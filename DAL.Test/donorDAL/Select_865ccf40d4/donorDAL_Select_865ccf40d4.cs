// Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

using NUnit.Framework;
using System.Data;
using System.Data.SqlClient;
using System;
using BloodBankManagementSystem.DAL.Test;
using Moq;

[TestFixture]
public class DonorDAL_Select_865ccf40d4_Test
{
    private Mock<IDbConnection> _mockConnection;
    private Mock<IDbCommand> _mockCommand;

    [SetUp]
    public void SetUp()
    {
        _mockConnection = new Mock<IDbConnection>();
        _mockCommand = new Mock<IDbCommand>();
        _mockCommand.Setup(m => m.ExecuteNonQuery()).Returns(1);
        _mockConnection.Setup(m => m.CreateCommand()).Returns(_mockCommand.Object);
    }

    [Test]
    public void Select_WhenCalled_ReturnsDataTable()
    {
        // Arrange
        _mockCommand.Setup(m => m.CommandText).Returns("SELECT * FROM tbl_donors");
        
        // Act
        DataTable result = Select();
        
        // Assert
        Assert.IsNotNull(result);
        Assert.IsInstanceOf<DataTable>(result);
    }

    [Test]
    public void Select_WhenDatabaseErrorOccurs_ThrowsException()
    {
        // Arrange
        _mockCommand.Setup(m => m.CommandText).Returns("SELECT * FROM tbl_donors");
        _mockCommand.Setup(m => m.ExecuteNonQuery()).Throws<SqlException>();
        
        // Act & Assert
        Assert.Throws<SqlException>(() => Select());
    }

    public DataTable Select()
    {
        DataTable dt = new DataTable();
        IDbCommand cmd = _mockConnection.Object.CreateCommand();
        cmd.CommandText = "SELECT * FROM tbl_donors";

        try
        {
            _mockConnection.Object.Open();
            cmd.ExecuteNonQuery();
            _mockConnection.Object.Close();
        }
        catch(Exception ex)
        {
            _mockConnection.Object.Close();
            throw;
        }

        return dt;
    }
}
