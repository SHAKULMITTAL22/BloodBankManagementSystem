// Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

using NUnit.Framework;
using System;
using System.Data;
using System.IO;
using System.Windows.Forms;
using BloodBankManagementSystem.UI;
using Moq;

namespace BloodBankManagementSystem.UI.Test
{
    [TestFixture]
    public class frmDonors_btnAdd_Click_538d36321e_Tests
    {
        private Mock<IDonorsDAL> mockDonorsDAL;
        private Mock<IUserDAL> mockUserDAL;
        private frmDonors frmDonors;

        [SetUp]
        public void Setup()
        {
            mockDonorsDAL = new Mock<IDonorsDAL>();
            mockUserDAL = new Mock<IUserDAL>();
            frmDonors = new frmDonors(mockDonorsDAL.Object, mockUserDAL.Object);
        }

        [Test]
        public void AddDonor_Successful()
        {
            frmDonors.txtFirstName.Text = "John";
            frmDonors.txtLastName.Text = "Doe";
            frmDonors.txtEmail.Text = "john.doe@example.com";
            // TODO: Add other form values

            mockUserDAL.Setup(d => d.GetIDFromUsername(It.IsAny<string>())).Returns(1);
            mockDonorsDAL.Setup(d => d.Insert(It.IsAny<DonorBLL>())).Returns(true);
            mockDonorsDAL.Setup(d => d.Select()).Returns(new DataTable());

            // Ensure method does not throw exception
            Assert.DoesNotThrow(() => frmDonors.btnAdd_Click(null, EventArgs.Empty));

            // Success message displayed
            StringAssert.Contains("New Donor Added Successfully", frmDonors.Messages);

            mockDonorsDAL.Verify(d => d.Insert(It.IsAny<DonorBLL>()), Times.Once);
        }

        [Test]
        public void AddDonor_Failure()
        {
            frmDonors.txtFirstName.Text = "John";
            frmDonors.txtLastName.Text = "Doe";
            frmDonors.txtEmail.Text = "john.doe@example.com";
            // TODO: Add other form values

            mockUserDAL.Setup(d => d.GetIDFromUsername(It.IsAny<string>())).Returns(1);
            mockDonorsDAL.Setup(d => d.Insert(It.IsAny<DonorBLL>())).Returns(false);

            // Ensure method does not throw exception
            Assert.DoesNotThrow(() => frmDonors.btnAdd_Click(null, EventArgs.Empty));

            // Failure message displayed
            StringAssert.Contains("Failed to Add new Donor", frmDonors.Messages);

            mockDonorsDAL.Verify(d => d.Insert(It.IsAny<DonorBLL>()), Times.Once);
        }

    }
}
